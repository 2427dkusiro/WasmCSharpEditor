@using WasmCsTest.UiLogics;
@using WasmCsTest.WorkerConnection;

<style>
    #virtualConsole {
        width: 100%;
        background-color: black;
        color: white;
        font-family: Consolas, Monaco, 'Courier New', Courier, monospace !important;
    }
</style>

@if (CodeEditorContext?.RunCodeState == RunCodeStatus.Running)
{
    <h4>仮想コンソール(実行中)</h4>
}
else
{
    <h4>仮想コンソール</h4>
}

<div>
    <textarea id="virtualConsole" spellcheck="false" readonly=@isReadOnly @bind="text" rows="8" />
</div>

@code {
    private string? text;

    private bool isReadOnly = true;
    private string IsReadOnly { get => isReadOnly ? "readonly" : ""; }

    [Parameter]
    public CodeEditorContext? CodeEditorContext { get; set; }


    protected override void OnInitialized()
    {
        if (CodeEditorContext is not null)
        {
            Action<string?> writeAction = (string? str) =>
            {
                text += str ?? "";
                this.StateHasChanged();

            };
            Action readAction = () =>
            {
                isReadOnly = false;

            };
            Action readLineAction = () =>
            {
                isReadOnly = false;
            };
            CodeEditorContext.WriteStdOut = writeAction;
            CodeEditorContext.WriteStdError = writeAction;
            CodeEditorContext.StdInputRead = readAction;
            CodeEditorContext.StdInputReadLine = readLineAction;
            CodeEditorContext.AddUpdateUiCallBack(async () =>
            {
                StateHasChanged();
                await Task.Yield();
            });
        }
    }
}
